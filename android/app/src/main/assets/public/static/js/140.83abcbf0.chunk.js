/*! For license information please see 140.83abcbf0.chunk.js.LICENSE.txt */
(self.webpackChunktheway=self.webpackChunktheway||[]).push([[140],{8140:function(t,e,r){r.r(e),r.d(e,{CapacitorGoogleMapsWeb:function(){return X}});var n=r(4165),i=r(5861),o=r(7762),a=r(5671),s=r(3144),u=r(136),c=r(9388),l=r(6653),p=r(885),h=r(2982),d=r(8262),f=r.n(d);function m(t,e,r,n,i,o){if(!(i-n<=r)){var a=n+i>>1;v(t,e,a,n,i,o%2),m(t,e,r,n,a-1,o+1),m(t,e,r,a+1,i,o+1)}}function v(t,e,r,n,i,o){for(;i>n;){if(i-n>600){var a=i-n+1,s=r-n+1,u=Math.log(a),c=.5*Math.exp(2*u/3),l=.5*Math.sqrt(u*c*(a-c)/a)*(s-a/2<0?-1:1);v(t,e,r,Math.max(n,Math.floor(r-s*c/a+l)),Math.min(i,Math.floor(r+(a-s)*c/a+l)),o)}var p=e[2*r+o],h=n,d=i;for(g(t,e,n,r),e[2*i+o]>p&&g(t,e,n,i);h<d;){for(g(t,e,h,d),h++,d--;e[2*h+o]<p;)h++;for(;e[2*d+o]>p;)d--}e[2*n+o]===p?g(t,e,n,d):g(t,e,++d,i),d<=r&&(n=d+1),r<=d&&(i=d-1)}}function g(t,e,r,n){k(t,r,n),k(e,2*r,2*n),k(e,2*r+1,2*n+1)}function k(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(t,e,r,n){var i=t-r,o=e-n;return i*i+o*o}var Z,w=function(t){return t[0]},M=function(t){return t[1]},x=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:w,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:M,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:64,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Float64Array;(0,a.Z)(this,t),this.nodeSize=i,this.points=e;for(var s=e.length<65536?Uint16Array:Uint32Array,u=this.ids=new s(e.length),c=this.coords=new o(2*e.length),l=0;l<e.length;l++)u[l]=l,c[2*l]=r(e[l]),c[2*l+1]=n(e[l]);m(u,c,i,0,u.length-1,0)}return(0,s.Z)(t,[{key:"range",value:function(t,e,r,n){return function(t,e,r,n,i,o,a){for(var s,u,c=[0,t.length-1,0],l=[];c.length;){var p=c.pop(),h=c.pop(),d=c.pop();if(h-d<=a)for(var f=d;f<=h;f++)s=e[2*f],u=e[2*f+1],s>=r&&s<=i&&u>=n&&u<=o&&l.push(t[f]);else{var m=Math.floor((d+h)/2);s=e[2*m],u=e[2*m+1],s>=r&&s<=i&&u>=n&&u<=o&&l.push(t[m]);var v=(p+1)%2;(0===p?r<=s:n<=u)&&(c.push(d),c.push(m-1),c.push(v)),(0===p?i>=s:o>=u)&&(c.push(m+1),c.push(h),c.push(v))}}return l}(this.ids,this.coords,t,e,r,n,this.nodeSize)}},{key:"within",value:function(t,e,r){return function(t,e,r,n,i,o){for(var a=[0,t.length-1,0],s=[],u=i*i;a.length;){var c=a.pop(),l=a.pop(),p=a.pop();if(l-p<=o)for(var h=p;h<=l;h++)y(e[2*h],e[2*h+1],r,n)<=u&&s.push(t[h]);else{var d=Math.floor((p+l)/2),f=e[2*d],m=e[2*d+1];y(f,m,r,n)<=u&&s.push(t[d]);var v=(c+1)%2;(0===c?r-i<=f:n-i<=m)&&(a.push(p),a.push(d-1),a.push(v)),(0===c?r+i>=f:n+i>=m)&&(a.push(d+1),a.push(l),a.push(v))}}return s}(this.ids,this.coords,t,e,r,this.nodeSize)}}]),t}(),b={minZoom:0,maxZoom:16,minPoints:2,radius:40,extent:512,nodeSize:64,log:!1,generateId:!1,reduce:null,map:function(t){return t}},C=Math.fround||(Z=new Float32Array(1),function(t){return Z[0]=+t,Z[0]}),L=function(){function t(e){(0,a.Z)(this,t),this.options=T(Object.create(b),e),this.trees=new Array(this.options.maxZoom+1)}return(0,s.Z)(t,[{key:"load",value:function(t){var e=this.options,r=e.log,n=e.minZoom,i=e.maxZoom,o=e.nodeSize;r&&console.time("total time");var a="prepare ".concat(t.length," points");r&&console.time(a),this.points=t;for(var s=[],u=0;u<t.length;u++)t[u].geometry&&s.push(P(t[u],u));this.trees[i+1]=new x(s,j,A,o,Float32Array),r&&console.timeEnd(a);for(var c=i;c>=n;c--){var l=+Date.now();s=this._cluster(s,c),this.trees[c]=new x(s,j,A,o,Float32Array),r&&console.log("z%d: %d clusters in %dms",c,s.length,+Date.now()-l)}return r&&console.timeEnd("total time"),this}},{key:"getClusters",value:function(t,e){var r=((t[0]+180)%360+360)%360-180,n=Math.max(-90,Math.min(90,t[1])),i=180===t[2]?180:((t[2]+180)%360+360)%360-180,a=Math.max(-90,Math.min(90,t[3]));if(t[2]-t[0]>=360)r=-180,i=180;else if(r>i){var s=this.getClusters([r,n,180,a],e),u=this.getClusters([-180,n,i,a],e);return s.concat(u)}var c,l=this.trees[this._limitZoom(e)],p=l.range(O(r),z(a),O(i),z(n)),h=[],d=(0,o.Z)(p);try{for(d.s();!(c=d.n()).done;){var f=c.value,m=l.points[f];h.push(m.numPoints?_(m):this.points[m.index])}}catch(v){d.e(v)}finally{d.f()}return h}},{key:"getChildren",value:function(t){var e=this._getOriginId(t),r=this._getOriginZoom(t),n="No cluster with the specified id.",i=this.trees[r];if(!i)throw new Error(n);var a=i.points[e];if(!a)throw new Error(n);var s,u=this.options.radius/(this.options.extent*Math.pow(2,r-1)),c=i.within(a.x,a.y,u),l=[],p=(0,o.Z)(c);try{for(p.s();!(s=p.n()).done;){var h=s.value,d=i.points[h];d.parentId===t&&l.push(d.numPoints?_(d):this.points[d.index])}}catch(f){p.e(f)}finally{p.f()}if(0===l.length)throw new Error(n);return l}},{key:"getLeaves",value:function(t,e,r){e=e||10,r=r||0;var n=[];return this._appendLeaves(n,t,e,r,0),n}},{key:"getTile",value:function(t,e,r){var n=this.trees[this._limitZoom(t)],i=Math.pow(2,t),o=this.options,a=o.extent,s=o.radius/a,u=(r-s)/i,c=(r+1+s)/i,l={features:[]};return this._addTileFeatures(n.range((e-s)/i,u,(e+1+s)/i,c),n.points,e,r,i,l),0===e&&this._addTileFeatures(n.range(1-s/i,u,1,c),n.points,i,r,i,l),e===i-1&&this._addTileFeatures(n.range(0,u,s/i,c),n.points,-1,r,i,l),l.features.length?l:null}},{key:"getClusterExpansionZoom",value:function(t){for(var e=this._getOriginZoom(t)-1;e<=this.options.maxZoom;){var r=this.getChildren(t);if(e++,1!==r.length)break;t=r[0].properties.cluster_id}return e}},{key:"_appendLeaves",value:function(t,e,r,n,i){var a,s=this.getChildren(e),u=(0,o.Z)(s);try{for(u.s();!(a=u.n()).done;){var c=a.value,l=c.properties;if(l&&l.cluster?i+l.point_count<=n?i+=l.point_count:i=this._appendLeaves(t,l.cluster_id,r,n,i):i<n?i++:t.push(c),t.length===r)break}}catch(p){u.e(p)}finally{u.f()}return i}},{key:"_addTileFeatures",value:function(t,e,r,n,i,a){var s,u=(0,o.Z)(t);try{for(u.s();!(s=u.n()).done;){var c=e[s.value],l=c.numPoints,p=void 0,h=void 0,d=void 0;if(l)p=E(c),h=c.x,d=c.y;else{var f=this.points[c.index];p=f.properties,h=O(f.geometry.coordinates[0]),d=z(f.geometry.coordinates[1])}var m={type:1,geometry:[[Math.round(this.options.extent*(h*i-r)),Math.round(this.options.extent*(d*i-n))]],tags:p},v=void 0;l?v=c.id:this.options.generateId?v=c.index:this.points[c.index].id&&(v=this.points[c.index].id),void 0!==v&&(m.id=v),a.features.push(m)}}catch(g){u.e(g)}finally{u.f()}}},{key:"_limitZoom",value:function(t){return Math.max(this.options.minZoom,Math.min(Math.floor(+t),this.options.maxZoom+1))}},{key:"_cluster",value:function(t,e){for(var r=[],n=this.options,i=n.radius,a=n.extent,s=n.reduce,u=n.minPoints,c=i/(a*Math.pow(2,e)),l=0;l<t.length;l++){var p=t[l];if(!(p.zoom<=e)){p.zoom=e;var h,d=this.trees[e+1],f=d.within(p.x,p.y,c),m=p.numPoints||1,v=m,g=(0,o.Z)(f);try{for(g.s();!(h=g.n()).done;){var k=h.value,y=d.points[k];y.zoom>e&&(v+=y.numPoints||1)}}catch(T){g.e(T)}finally{g.f()}if(v>m&&v>=u){var Z,w=p.x*m,M=p.y*m,x=s&&m>1?this._map(p,!0):null,b=(l<<5)+(e+1)+this.points.length,C=(0,o.Z)(f);try{for(C.s();!(Z=C.n()).done;){var L=Z.value,P=d.points[L];if(!(P.zoom<=e)){P.zoom=e;var _=P.numPoints||1;w+=P.x*_,M+=P.y*_,P.parentId=b,s&&(x||(x=this._map(p,!0)),s(x,this._map(P)))}}}catch(T){C.e(T)}finally{C.f()}p.parentId=b,r.push(I(w/v,M/v,b,v,x))}else if(r.push(p),v>1){var E,O=(0,o.Z)(f);try{for(O.s();!(E=O.n()).done;){var z=E.value,S=d.points[z];S.zoom<=e||(S.zoom=e,r.push(S))}}catch(T){O.e(T)}finally{O.f()}}}}return r}},{key:"_getOriginId",value:function(t){return t-this.points.length>>5}},{key:"_getOriginZoom",value:function(t){return(t-this.points.length)%32}},{key:"_map",value:function(t,e){if(t.numPoints)return e?T({},t.properties):t.properties;var r=this.points[t.index].properties,n=this.options.map(r);return e&&n===r?T({},n):n}}]),t}();function I(t,e,r,n,i){return{x:C(t),y:C(e),zoom:1/0,id:r,parentId:-1,numPoints:n,properties:i}}function P(t,e){var r=(0,p.Z)(t.geometry.coordinates,2),n=r[0],i=r[1];return{x:C(O(n)),y:C(z(i)),zoom:1/0,index:e,parentId:-1}}function _(t){return{type:"Feature",id:t.id,properties:E(t),geometry:{type:"Point",coordinates:[(e=t.x,360*(e-.5)),S(t.y)]}};var e}function E(t){var e=t.numPoints,r=e>=1e4?"".concat(Math.round(e/1e3),"k"):e>=1e3?"".concat(Math.round(e/100)/10,"k"):e;return T(T({},t.properties),{cluster:!0,cluster_id:t.id,point_count:e,point_count_abbreviated:r})}function O(t){return t/360+.5}function z(t){var e=Math.sin(t*Math.PI/180),r=.5-.25*Math.log((1+e)/(1-e))/Math.PI;return r<0?0:r>1?1:r}function S(t){var e=(180-360*t)*Math.PI/180;return 360*Math.atan(Math.exp(e))/Math.PI-90}function T(t,e){for(var r in e)t[r]=e[r];return t}function j(t){return t.x}function A(t){return t.y}function B(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(t,n[i])&&(r[n[i]]=t[n[i]])}return r}var F=function(){function t(e){var r=e.markers,n=e.position;(0,a.Z)(this,t),this.markers=r,n&&(n instanceof google.maps.LatLng?this._position=n:this._position=new google.maps.LatLng(n))}return(0,s.Z)(t,[{key:"bounds",get:function(){if(0!==this.markers.length||this._position)return this.markers.reduce((function(t,e){return t.extend(e.getPosition())}),new google.maps.LatLngBounds(this._position,this._position))}},{key:"position",get:function(){return this._position||this.bounds.getCenter()}},{key:"count",get:function(){return this.markers.filter((function(t){return t.getVisible()})).length}},{key:"push",value:function(t){this.markers.push(t)}},{key:"delete",value:function(){this.marker&&(this.marker.setMap(null),delete this.marker),this.markers.length=0}}]),t}(),G=function(){function t(e){var r=e.maxZoom,n=void 0===r?16:r;(0,a.Z)(this,t),this.maxZoom=n}return(0,s.Z)(t,[{key:"noop",value:function(t){var e=t.markers;return N(e)}}]),t}(),N=function(t){return t.map((function(t){return new F({position:t.getPosition(),markers:[t]})}))},R=function(t){(0,u.Z)(r,t);var e=(0,c.Z)(r);function r(t){var n;(0,a.Z)(this,r);var i=t.maxZoom,o=t.radius,s=void 0===o?60:o,u=B(t,["maxZoom","radius"]);return(n=e.call(this,{maxZoom:i})).superCluster=new L(Object.assign({maxZoom:n.maxZoom,radius:s},u)),n.state={zoom:null},n}return(0,s.Z)(r,[{key:"calculate",value:function(t){var e=!1;if(!f()(t.markers,this.markers)){e=!0,this.markers=(0,h.Z)(t.markers);var r=this.markers.map((function(t){return{type:"Feature",geometry:{type:"Point",coordinates:[t.getPosition().lng(),t.getPosition().lat()]},properties:{marker:t}}}));this.superCluster.load(r)}var n={zoom:t.map.getZoom()};return e||this.state.zoom>this.maxZoom&&n.zoom>this.maxZoom||(e=e||!f()(this.state,n)),this.state=n,e&&(this.clusters=this.cluster(t)),{clusters:this.clusters,changed:e}}},{key:"cluster",value:function(t){var e=t.map;return this.superCluster.getClusters([-180,-90,180,90],Math.round(e.getZoom())).map(this.transformCluster.bind(this))}},{key:"transformCluster",value:function(t){var e=(0,p.Z)(t.geometry.coordinates,2),r=e[0],n=e[1],i=t.properties;if(i.cluster)return new F({markers:this.superCluster.getLeaves(i.cluster_id,1/0).map((function(t){return t.properties.marker})),position:new google.maps.LatLng({lat:n,lng:r})});var o=i.marker;return new F({markers:[o],position:o.getPosition()})}}]),r}(G),U=(0,s.Z)((function t(e,r){(0,a.Z)(this,t),this.markers={sum:e.length};var n=r.map((function(t){return t.count})),i=n.reduce((function(t,e){return t+e}),0);this.clusters={count:r.length,markers:{mean:i/r.length,sum:i,min:Math.min.apply(Math,(0,h.Z)(n)),max:Math.max.apply(Math,(0,h.Z)(n))}}})),D=function(){function t(){(0,a.Z)(this,t)}return(0,s.Z)(t,[{key:"render",value:function(t,e){var r=t.count,n=t.position,i=r>Math.max(10,e.clusters.markers.mean)?"#ff0000":"#0000ff",o=window.btoa('\n  <svg fill="'.concat(i,'" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 240 240">\n    <circle cx="120" cy="120" opacity=".6" r="70" />\n    <circle cx="120" cy="120" opacity=".3" r="90" />\n    <circle cx="120" cy="120" opacity=".2" r="110" />\n  </svg>'));return new google.maps.Marker({position:n,icon:{url:"data:image/svg+xml;base64,".concat(o),scaledSize:new google.maps.Size(45,45)},label:{text:String(r),color:"rgba(255,255,255,0.9)",fontSize:"12px"},title:"Cluster of ".concat(r," markers"),zIndex:Number(google.maps.Marker.MAX_ZINDEX)+r})}}]),t}();var H,K=(0,s.Z)((function t(){(0,a.Z)(this,t),function(t,e){for(var r in e.prototype)t.prototype[r]=e.prototype[r]}(t,google.maps.OverlayView)}));!function(t){t.CLUSTERING_BEGIN="clusteringbegin",t.CLUSTERING_END="clusteringend",t.CLUSTER_CLICK="click"}(H||(H={}));var W=function(t,e,r){r.fitBounds(e.bounds)},V=function(t){(0,u.Z)(r,t);var e=(0,c.Z)(r);function r(t){var n,i=t.map,o=t.markers,s=void 0===o?[]:o,u=t.algorithm,c=void 0===u?new R({}):u,l=t.renderer,p=void 0===l?new D():l,d=t.onClusterClick,f=void 0===d?W:d;return(0,a.Z)(this,r),(n=e.call(this)).markers=(0,h.Z)(s),n.clusters=[],n.algorithm=c,n.renderer=p,n.onClusterClick=f,i&&n.setMap(i),n}return(0,s.Z)(r,[{key:"addMarker",value:function(t,e){this.markers.includes(t)||(this.markers.push(t),e||this.render())}},{key:"addMarkers",value:function(t,e){var r=this;t.forEach((function(t){r.addMarker(t,!0)})),e||this.render()}},{key:"removeMarker",value:function(t,e){var r=this.markers.indexOf(t);return-1!==r&&(t.setMap(null),this.markers.splice(r,1),e||this.render(),!0)}},{key:"removeMarkers",value:function(t,e){var r=this,n=!1;return t.forEach((function(t){n=r.removeMarker(t,!0)||n})),n&&!e&&this.render(),n}},{key:"clearMarkers",value:function(t){this.markers.length=0,t||this.render()}},{key:"render",value:function(){var t=this.getMap();if(t instanceof google.maps.Map&&this.getProjection()){google.maps.event.trigger(this,H.CLUSTERING_BEGIN,this);var e=this.algorithm.calculate({markers:this.markers,map:t,mapCanvasProjection:this.getProjection()}),r=e.clusters,n=e.changed;(n||void 0==n)&&(this.reset(),this.clusters=r,this.renderClusters()),google.maps.event.trigger(this,H.CLUSTERING_END,this)}}},{key:"onAdd",value:function(){this.idleListener=this.getMap().addListener("idle",this.render.bind(this)),this.render()}},{key:"onRemove",value:function(){google.maps.event.removeListener(this.idleListener),this.reset()}},{key:"reset",value:function(){this.markers.forEach((function(t){return t.setMap(null)})),this.clusters.forEach((function(t){return t.delete()})),this.clusters=[]}},{key:"renderClusters",value:function(){var t=this,e=new U(this.markers,this.clusters),r=this.getMap();this.clusters.forEach((function(n){1===n.markers.length?n.marker=n.markers[0]:(n.marker=t.renderer.render(n,e),t.onClusterClick&&n.marker.addListener("click",(function(e){google.maps.event.trigger(t,H.CLUSTER_CLICK,n),t.onClusterClick(e,n,r)}))),n.marker.setMap(r)}))}}]),r}(K),X=function(t){(0,u.Z)(l,t);var e=(0,c.Z)(l);function l(){var t;return(0,a.Z)(this,l),(t=e.apply(this,arguments)).gMapsRef=void 0,t.maps={},t.currMarkerId=0,t.onClusterClickHandler=function(e,r,n){var i,a,s=t.getIdFromMap(n),u=[];if(void 0!=r.markers){var c,l=(0,o.Z)(r.markers);try{for(l.s();!(c=l.n()).done;){var p=c.value,h=t.getIdFromMarker(s,p);u.push({markerId:h,latitude:null===(i=p.getPosition())||void 0===i?void 0:i.lat(),longitude:null===(a=p.getPosition())||void 0===a?void 0:a.lng(),title:p.getTitle(),snippet:""})}}catch(d){l.e(d)}finally{l.f()}}t.notifyListeners("onClusterClick",{mapId:s,latitude:r.position.lat(),longitude:r.position.lng(),size:r.count,items:u})},t}return(0,s.Z)(l,[{key:"getIdFromMap",value:function(t){for(var e in this.maps)if(this.maps[e].map==t)return e;return""}},{key:"getIdFromMarker",value:function(t,e){for(var r in this.maps[t].markers)if(this.maps[t].markers[r]==e)return r;return""}},{key:"importGoogleLib",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var i,o,a;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(void 0!==this.gMapsRef){t.next=10;break}return t.next=3,r.e(614).then(r.bind(r,5614));case 3:return i=t.sent,o=new i.Loader({apiKey:null!==e&&void 0!==e?e:"",version:"weekly",libraries:["places"]}),t.next=7,o.load();case 7:a=t.sent,this.gMapsRef=a.maps,console.log("Loaded google maps API");case 10:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"setCamera",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:this.maps[e.id].map.moveCamera({center:e.config.coordinate,heading:e.config.bearing,tilt:e.config.angle,zoom:e.config.zoom});case 1:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"setMapType",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:this.maps[e.id].map.setMapTypeId(e.mapType);case 1:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"enableIndoorMaps",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:throw new Error("Method not supported on web.");case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()},{key:"enableTrafficLayer",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r,i;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:i=null!==(r=this.maps[e.id].trafficLayer)&&void 0!==r?r:new google.maps.TrafficLayer(),e.enabled?(i.setMap(this.maps[e.id].map),this.maps[e.id].trafficLayer=i):this.maps[e.id].trafficLayer&&(i.setMap(null),this.maps[e.id].trafficLayer=void 0);case 2:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"enableAccessibilityElements",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:throw new Error("Method not supported on web.");case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()},{key:"dispatchMapEvent",value:function(t){throw new Error("Method not supported on web.")}},{key:"enableCurrentLocation",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r=this;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!e.enabled){t.next=6;break}if(!navigator.geolocation){t.next=5;break}navigator.geolocation.getCurrentPosition((function(t){var n={lat:t.coords.latitude,lng:t.coords.longitude};r.maps[e.id].map.setCenter(n),r.notifyListeners("onMyLocationButtonClick",{}),r.notifyListeners("onMyLocationClick",{})}),(function(){throw new Error("Geolocation not supported on web browser.")})),t.next=6;break;case 5:throw new Error("Geolocation not supported on web browser.");case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()},{key:"setPadding",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:void 0!==(r=this.maps[e.id].map.getBounds())&&this.maps[e.id].map.fitBounds(r,e.padding);case 2:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"getMapBounds",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=this.maps[e.id].map.getBounds()){t.next=3;break}throw new Error("Google Map Bounds could not be found.");case 3:return t.abrupt("return",{southwest:{lat:r.getSouthWest().lat(),lng:r.getSouthWest().lng()},center:{lat:r.getCenter().lat(),lng:r.getCenter().lng()},northeast:{lat:r.getNorthEast().lat(),lng:r.getNorthEast().lng()}});case 4:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"addMarkers",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r,i,a,s,u,c,l,p;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=[],i=this.maps[e.id],a=(0,o.Z)(e.markers);try{for(a.s();!(s=a.n()).done;)u=s.value,c=this.buildMarkerOpts(u,i.map),l=new google.maps.Marker(c),p=""+this.currMarkerId,i.markers[p]=l,this.setMarkerListeners(e.id,p,l),r.push(p),this.currMarkerId++}catch(n){a.e(n)}finally{a.f()}return t.abrupt("return",{ids:r});case 5:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"addMarker",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r,i,o;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=this.buildMarkerOpts(e.marker,this.maps[e.id].map),i=new google.maps.Marker(r),o=""+this.currMarkerId,this.maps[e.id].markers[o]=i,this.setMarkerListeners(e.id,o,i),this.currMarkerId++,t.abrupt("return",{id:o});case 7:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"removeMarkers",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r,i,a,s;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=this.maps[e.id],i=(0,o.Z)(e.markerIds);try{for(i.s();!(a=i.n()).done;)s=a.value,r.markers[s].setMap(null),delete r.markers[s]}catch(n){i.e(n)}finally{i.f()}case 3:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"removeMarker",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:this.maps[e.id].markers[e.markerId].setMap(null),delete this.maps[e.id].markers[e.markerId];case 2:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"enableClustering",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r,i;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(i in r=[],this.maps[e.id].markers)r.push(this.maps[e.id].markers[i]);this.maps[e.id].markerClusterer=new V({map:this.maps[e.id].map,markers:r,onClusterClick:this.onClusterClickHandler});case 3:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"disableClustering",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:null===(r=this.maps[e.id].markerClusterer)||void 0===r||r.setMap(null),this.maps[e.id].markerClusterer=void 0;case 2:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"onScroll",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:throw new Error("Method not supported on web.");case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()},{key:"create",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log("Create map: ".concat(e.id)),t.next=3,this.importGoogleLib(e.apiKey);case 3:this.maps[e.id]={map:new window.google.maps.Map(e.element,Object.assign({},e.config)),element:e.element,markers:{}},this.setMapListeners(e.id);case 5:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"destroy",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("Destroy map: ".concat(e.id)),(r=this.maps[e.id]).element.innerHTML="",r.map.unbindAll(),delete this.maps[e.id];case 5:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"setMarkerListeners",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e,r,i){var o=this;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:i.addListener("click",(function(){var t,n;o.notifyListeners("onMarkerClick",{mapId:e,markerId:r,latitude:null===(t=i.getPosition())||void 0===t?void 0:t.lat(),longitude:null===(n=i.getPosition())||void 0===n?void 0:n.lng(),title:i.getTitle(),snippet:""})})),i.addListener("dragstart",(function(){var t,n;o.notifyListeners("onMarkerDragStart",{mapId:e,markerId:r,latitude:null===(t=i.getPosition())||void 0===t?void 0:t.lat(),longitude:null===(n=i.getPosition())||void 0===n?void 0:n.lng(),title:i.getTitle(),snippet:""})})),i.addListener("drag",(function(){var t,n;o.notifyListeners("onMarkerDrag",{mapId:e,markerId:r,latitude:null===(t=i.getPosition())||void 0===t?void 0:t.lat(),longitude:null===(n=i.getPosition())||void 0===n?void 0:n.lng(),title:i.getTitle(),snippet:""})})),i.addListener("dragend",(function(){var t,n;o.notifyListeners("onMarkerDragEnd",{mapId:e,markerId:r,latitude:null===(t=i.getPosition())||void 0===t?void 0:t.lat(),longitude:null===(n=i.getPosition())||void 0===n?void 0:n.lng(),title:i.getTitle(),snippet:""})}));case 4:case"end":return t.stop()}}),t)})));return function(e,r,n){return t.apply(this,arguments)}}()},{key:"setMapListeners",value:function(){var t=(0,i.Z)((0,n.Z)().mark((function t(e){var r,o=this;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:(r=this.maps[e].map).addListener("idle",(0,i.Z)((0,n.Z)().mark((function t(){var i,a,s;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,o.getMapBounds({id:e});case 2:s=t.sent,o.notifyListeners("onCameraIdle",{mapId:e,bearing:r.getHeading(),bounds:s,latitude:null===(i=r.getCenter())||void 0===i?void 0:i.lat(),longitude:null===(a=r.getCenter())||void 0===a?void 0:a.lng(),tilt:r.getTilt(),zoom:r.getZoom()});case 4:case"end":return t.stop()}}),t)})))),r.addListener("center_changed",(function(){o.notifyListeners("onCameraMoveStarted",{mapId:e,isGesture:!0})})),r.addListener("bounds_changed",(0,i.Z)((0,n.Z)().mark((function t(){var i,a,s;return(0,n.Z)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,o.getMapBounds({id:e});case 2:s=t.sent,o.notifyListeners("onBoundsChanged",{mapId:e,bearing:r.getHeading(),bounds:s,latitude:null===(i=r.getCenter())||void 0===i?void 0:i.lat(),longitude:null===(a=r.getCenter())||void 0===a?void 0:a.lng(),tilt:r.getTilt(),zoom:r.getZoom()});case 4:case"end":return t.stop()}}),t)})))),r.addListener("click",(function(t){var r,n;o.notifyListeners("onMapClick",{mapId:e,latitude:null===(r=t.latLng)||void 0===r?void 0:r.lat(),longitude:null===(n=t.latLng)||void 0===n?void 0:n.lng()})})),this.notifyListeners("onMapReady",{mapId:e});case 6:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()},{key:"buildMarkerOpts",value:function(t,e){var r=void 0;return t.iconUrl&&(r={url:t.iconUrl,scaledSize:t.iconSize?new google.maps.Size(t.iconSize.width,t.iconSize.height):null,anchor:t.iconAnchor?new google.maps.Point(t.iconAnchor.x,t.iconAnchor.y):new google.maps.Point(0,0),origin:t.iconOrigin?new google.maps.Point(t.iconOrigin.x,t.iconOrigin.y):new google.maps.Point(0,0)}),{position:t.coordinate,map:e,opacity:t.opacity,title:t.title,icon:r,draggable:t.draggable}}}]),l}(l.Uw)},8262:function(t){t.exports=function t(e,r){if(e===r)return!0;if(e&&r&&"object"==typeof e&&"object"==typeof r){if(e.constructor!==r.constructor)return!1;var n,i,o;if(Array.isArray(e)){if((n=e.length)!=r.length)return!1;for(i=n;0!==i--;)if(!t(e[i],r[i]))return!1;return!0}if(e.constructor===RegExp)return e.source===r.source&&e.flags===r.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===r.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===r.toString();if((n=(o=Object.keys(e)).length)!==Object.keys(r).length)return!1;for(i=n;0!==i--;)if(!Object.prototype.hasOwnProperty.call(r,o[i]))return!1;for(i=n;0!==i--;){var a=o[i];if(!t(e[a],r[a]))return!1}return!0}return e!==e&&r!==r}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,